'use strict';

var config = {
	hostname: 'example-sitegenesis-dw.demandware.net',
	password: 'password'
};
var sinon = require('sinon');
var requestSpy = sinon.spy()
var requireInject = require('require-inject');

var DWDAV = requireInject('../', {
	request: requestSpy
});

var dwdav = DWDAV(config);

var filename = 'test/fixture.html';
var directoryName = 'test';
var webdavPath = '/on/demandware.servlet/webdav/Sites/Cartridges/';
var version = 'version1';

var opts = {
	auth: {
		user: 'admin', // default username
		password: config.password
	},
	strictSSL: false,
	baseUrl: 'https://' + config.hostname + webdavPath + version
}

var tap = require('tap');
tap.test('propfind', function (t) {
	dwdav.propfind();
	// first argument of the first call
	t.deepEqual(requestSpy.args[0][0], Object.assign({}, opts, {
		headers: {
			Depth: 1
		},
		method: 'PROPFIND',
		uri: '/'
	}));
	t.end();
});

tap.test('post', function (t) {
	dwdav.post(filename).then(null, function (err) {
		// ignore error about the fake request object to pipe to
		if (err.message !== 'Cannot read property \'on\' of undefined') {
			console.error(err.stack);
		}
	});
	// second call
	t.deepEqual(requestSpy.args[1][0], Object.assign({}, opts, {
		method: 'PUT',
		uri: '/' + filename
	}));
	t.end();
});

tap.test('unzip', function (t) {
	dwdav.unzip(filename);
	t.deepEqual(requestSpy.args[2][0], Object.assign({}, opts, {
		method: 'POST',
		form: {
			method: 'UNZIP'
		},
		uri: '/' + filename
	}));
	t.end();
});

tap.test('delete', function (t) {
	dwdav.delete(filename);
	t.deepEqual(requestSpy.args[3][0], Object.assign({}, opts, {
		method: 'DELETE',
		uri: '/' + filename
	}))
	t.end();
});

tap.test('create directory', function (t) {
	dwdav.mkcol(directoryName);
	t.deepEqual(requestSpy.args[4][0], Object.assign({}, opts, {
		method: 'MKCOL',
		uri: '/' + directoryName
	}));
	t.end();
});

tap.test('root directory option', function (t) {
	var dwdav = DWDAV(Object.assign({
		root: 'test'
	}, config));
	dwdav.post(filename).then(null, function (err) {
		// ignore error about the fake request object to pipe to
		if (err.message !== 'Cannot read property \'on\' of undefined') {
			console.error(err.stack);
		}
	});
	t.deepEqual(requestSpy.args[5][0], Object.assign({}, opts, {
		method: 'PUT',
		uri: '/fixture.html'
	}));
	t.end();
});

tap.test('upload file that does not exist', function (t) {
	dwdav.post('test/notexist.js').then(null, function (err) {
		t.equal(err.message, 'test/notexist.js does not exist.');
		t.end();
	});
})
